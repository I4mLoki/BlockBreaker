name: iOS Build

on:
  workflow_dispatch: {}
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:

  #####################################################################################################################
  ## Build for iOS
  #####################################################################################################################
  
  buildForiOSPlatform:
    name: Build For iOS Platform
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - ./
        unityVersion:
          - 2020.3.15f2
        targetPlatform:
          - iOS
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: false
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v2.1.3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1
      - name: Git LFS Pull
        run: git lfs pull
      - uses: actions/cache@v2.1.3
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
      - uses: game-ci/unity-builder@v2
        id: buildStep
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          versioning: Semantic
          buildName: BlockBreaker
          allowDirtyBuild: true
      - uses: actions/upload-artifact@v2
        with:
          name: build-iOS
          path: build/iOS
          
  #####################################################################################################################
  ## App Distribution
  #####################################################################################################################
  
  appDistribution:
    name: Upload .ipa file to Firebase
    runs-on: ubuntu-latest
    needs: buildForiOSPlatform
    env:
      IOS_BUILD_FILE_PATH: '${{ github.workspace }}/build/iOS/BlockBreaker.ipa'
      FIREBASE_GROUP: test
      FIREBASE_RELEASE_NOTES: 'iOS build number #${{ github.run_number }} requested by ${{ github.actor }}.'
    steps:
      - name: Test 1
        run: ls -r
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download iOS Artifact
        uses: actions/download-artifact@v2
        with:
          name: build-iOS
          path: build/iOS
      - uses: wzieba/Firebase-Distribution-Github-Action@v1.3.2
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          file: ${{env.IOS_BUILD_FILE_PATH}}
          groups: ${{env.FIREBASE_GROUP}}
          releaseNotes: ${{env.FIREBASE_RELEASE_NOTES}}
      
  #####################################################################################################################
  ## Final stuff
  #####################################################################################################################
  
  finalStuff:
    name: Do latest stuff after building
    runs-on: ubuntu-latest
    needs: appDistribution
    env:
      DISCORD_MESSAGE: 'iOS build number #${{ github.run_number }} requested by ${{ github.actor }} has been successfully deployed to Firebase.'
    steps:
      - name: Cleanup to avoid storage limit
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: build-iOS
      - name: Send confirmation message to Discord
        uses: sebastianpopp/discord-action@releases/v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          message: ${{env.DISCORD_MESSAGE}}
